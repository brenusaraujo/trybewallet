{"ast":null,"code":"import { SET_CURRENCIES } from '../actions/currencies.action';\nimport { ADD_EXPENSE, EDIT_EXPENSE, UPDATE_EXPENSE, DELETE_EXPENSE } from '../actions/expenses.action';\nimport { UPDATE_TOTAL_FIELD } from '../actions/totalField.action';\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  editor: false,\n  idToEdit: 0,\n  totalField: 0\n};\nexport default function wallet() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_CURRENCIES:\n      return { ...state,\n        currencies: action.payload\n      };\n\n    case ADD_EXPENSE:\n      return { ...state,\n        expenses: [...state.expenses, {\n          id: state.expenses.length,\n          ...action.payload\n        }]\n      };\n\n    case EDIT_EXPENSE:\n      return { ...state,\n        editor: true,\n        idToEdit: action.payload\n      };\n\n    case UPDATE_EXPENSE:\n      return { ...state,\n        editor: false,\n        expenses: action.payload\n      };\n\n    case DELETE_EXPENSE:\n      return { ...state,\n        expenses: state.expenses.filter(_ref => {\n          let {\n            id\n          } = _ref;\n          return id !== action.payload.id;\n        }),\n        totalField: (Number(state.totalField) - action.payload.total).toFixed(2)\n      };\n\n    case UPDATE_TOTAL_FIELD:\n      return { ...state,\n        totalField: +state.expenses.reduce((acc, _ref2) => {\n          let {\n            exchangeRates,\n            currency,\n            value\n          } = _ref2;\n          const {\n            ask\n          } = exchangeRates[currency];\n          const expenseTotal = +value * +ask;\n          return acc + expenseTotal;\n        }, 0).toFixed(2)\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/brenoaraujo/projects-to-github/TrybeWallet/src/redux/reducers/wallet.js"],"names":["SET_CURRENCIES","ADD_EXPENSE","EDIT_EXPENSE","UPDATE_EXPENSE","DELETE_EXPENSE","UPDATE_TOTAL_FIELD","INITIAL_STATE","currencies","expenses","editor","idToEdit","totalField","wallet","state","action","type","payload","id","length","filter","Number","total","toFixed","reduce","acc","exchangeRates","currency","value","ask","expenseTotal"],"mappings":"AAAA,SAASA,cAAT,QAA+B,8BAA/B;AACA,SACEC,WADF,EAEEC,YAFF,EAGEC,cAHF,EAIEC,cAJF,QAKO,4BALP;AAMA,SAASC,kBAAT,QAAmC,8BAAnC;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,UAAU,EAAE,EADQ;AAEpBC,EAAAA,QAAQ,EAAE,EAFU;AAGpBC,EAAAA,MAAM,EAAE,KAHY;AAIpBC,EAAAA,QAAQ,EAAE,CAJU;AAKpBC,EAAAA,UAAU,EAAE;AALQ,CAAtB;AAQA,eAAe,SAASC,MAAT,GAA+C;AAAA,MAA/BC,KAA+B,uEAAvBP,aAAuB;AAAA,MAARQ,MAAQ;;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACA,SAAKf,cAAL;AACE,aAAO,EAAE,GAAGa,KAAL;AAAYN,QAAAA,UAAU,EAAEO,MAAM,CAACE;AAA/B,OAAP;;AACF,SAAKf,WAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELL,QAAAA,QAAQ,EAAE,CACR,GAAGK,KAAK,CAACL,QADD,EAER;AAAES,UAAAA,EAAE,EAAEJ,KAAK,CAACL,QAAN,CAAeU,MAArB;AAA6B,aAAGJ,MAAM,CAACE;AAAvC,SAFQ;AAFL,OAAP;;AAOF,SAAKd,YAAL;AACE,aAAO,EAAE,GAAGW,KAAL;AAAYJ,QAAAA,MAAM,EAAE,IAApB;AAA0BC,QAAAA,QAAQ,EAAEI,MAAM,CAACE;AAA3C,OAAP;;AACF,SAAKb,cAAL;AACE,aAAO,EAAE,GAAGU,KAAL;AAAYJ,QAAAA,MAAM,EAAE,KAApB;AAA2BD,QAAAA,QAAQ,EAAEM,MAAM,CAACE;AAA5C,OAAP;;AACF,SAAKZ,cAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELL,QAAAA,QAAQ,EAAEK,KAAK,CAACL,QAAN,CAAeW,MAAf,CAAsB;AAAA,cAAC;AAAEF,YAAAA;AAAF,WAAD;AAAA,iBAAYA,EAAE,KAAKH,MAAM,CAACE,OAAP,CAAeC,EAAlC;AAAA,SAAtB,CAFL;AAGLN,QAAAA,UAAU,EAAE,CAACS,MAAM,CAACP,KAAK,CAACF,UAAP,CAAN,GAA2BG,MAAM,CAACE,OAAP,CAAeK,KAA3C,EAAkDC,OAAlD,CAA0D,CAA1D;AAHP,OAAP;;AAKF,SAAKjB,kBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELF,QAAAA,UAAU,EAAE,CAAEE,KAAK,CAACL,QAAN,CAAee,MAAf,CAAsB,CAACC,GAAD,YAA6C;AAAA,cAAvC;AAAEC,YAAAA,aAAF;AAAiBC,YAAAA,QAAjB;AAA2BC,YAAAA;AAA3B,WAAuC;AAC/E,gBAAM;AAAEC,YAAAA;AAAF,cAAUH,aAAa,CAACC,QAAD,CAA7B;AACA,gBAAMG,YAAY,GAAG,CAACF,KAAD,GAAS,CAACC,GAA/B;AACA,iBAAOJ,GAAG,GAAGK,YAAb;AACD,SAJa,EAIX,CAJW,CAAD,CAINP,OAJM,CAIE,CAJF;AAFR,OAAP;;AAQF;AACE,aAAOT,KAAP;AA/BF;AAiCD","sourcesContent":["import { SET_CURRENCIES } from '../actions/currencies.action';\nimport {\n  ADD_EXPENSE,\n  EDIT_EXPENSE,\n  UPDATE_EXPENSE,\n  DELETE_EXPENSE,\n} from '../actions/expenses.action';\nimport { UPDATE_TOTAL_FIELD } from '../actions/totalField.action';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  editor: false,\n  idToEdit: 0,\n  totalField: 0,\n};\n\nexport default function wallet(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case SET_CURRENCIES:\n    return { ...state, currencies: action.payload };\n  case ADD_EXPENSE:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses,\n        { id: state.expenses.length, ...action.payload },\n      ],\n    };\n  case EDIT_EXPENSE:\n    return { ...state, editor: true, idToEdit: action.payload };\n  case UPDATE_EXPENSE:\n    return { ...state, editor: false, expenses: action.payload };\n  case DELETE_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.filter(({ id }) => id !== action.payload.id),\n      totalField: (Number(state.totalField) - action.payload.total).toFixed(2),\n    };\n  case UPDATE_TOTAL_FIELD:\n    return {\n      ...state,\n      totalField: +(state.expenses.reduce((acc, { exchangeRates, currency, value }) => {\n        const { ask } = exchangeRates[currency];\n        const expenseTotal = +value * +ask;\n        return acc + expenseTotal;\n      }, 0)).toFixed(2),\n    };\n  default:\n    return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}